package controller;

import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import utilities.ReportManager;
import languages.LanguageManager;
import javafx.scene.control.Button;

import java.sql.SQLException;
/**
 * This class serves as the controller for the Reports.fxml file.
 * Its main responsibility is to manage the process of generating, exporting, and presenting reports.
 * The ReportsController collaborates with various components such as the model and view components,
 * to handle the display of reports in the most efficient and effective manner possible.
 * It also ensures that all the necessary data is compiled from the appropriate sources
 * before it is presented as a report.
 * Basically, this class is responsible for monitoring and overseeing the entire report generation
 * and presentation process, to ensure that all tasks are carried out smoothly and successfully.
 * */
public class Reports {
    public TextArea reportTextArea;
    public Button contactScheduleButton;
    public Button appointmentsButton;
    public Button exportButton;
    public Button locationReportButton;
    private String report = "";

    /**
     * This method initializes the text area with the Contact Schedule report
     * and also translates all the user interface text to the selected language.
     * The Contact Schedule report contains a schedule of all the contacts for the
     * specified time period. The text area is populated with specific information
     * related to each contact, including their name, phone number, email address,
     * and the date and time of their next scheduled contact. The translation of
     * the user interface text ensures that the application is accessible and
     * usable for users who speak different languages. This method is designed
     * to enhance the overall user experience by providing essential information
     * and enabling users to interact with the application in their preferred language.
     */
    @FXML
    private void initialize() {
        try {
            String contactScheduleReport = ReportManager.contactSchedule();
            reportTextArea.setText(contactScheduleReport);
        } catch (SQLException e) {
            // Handle the exception
        }
        contactScheduleButton.setText(LanguageManager.getTranslation("Contact_Schedule"));
        appointmentsButton.setText(LanguageManager.getTranslation("Sorted_Appointments"));
        exportButton.setText(LanguageManager.getTranslation("Export"));
        locationReportButton.setText(LanguageManager.getTranslation("Customer_Locations"));
    }

    /**
     Updates the GUI TextArea with the contact schedule report generated by the ReportManager.
     Also sets the report member variable to the appropriate text for the title of the related txt file.
     @throws SQLException if an error occurs while querying the database
     */
    public void updateContactSchedule() throws SQLException {
        try {
            reportTextArea.setText(ReportManager.contactSchedule());
            report = "contact_schedule";
        } catch (SQLException e) {
            reportTextArea.setText(LanguageManager.getTranslation("An SQL error has occurred upon database query."));
            report = "SQL_error"; throw e;
        }
    }

    /**
     Sets the TextArea to display a report of appointments sorted by type and month, and sets the report member variable
     to the appropriate name for the related txt file.
     */
    public void onAppointmentsButton() {
        reportTextArea.setText(ReportManager.countAppointmentsByTypeAndMonth());
        report = "appointments_by_type_and_month.txt";
    }

    /**
     * Appends the current report to a txt file.
     * If the report is printed multiple times, it will be appended to the file.
     */
    public void onExportButton() {
        ReportManager.writeReportToFile(report, reportTextArea.getText());
    }
    /**
     * Updates the TextArea with customer data sorted by location and sets the report member variable
     * to the appropriate file name for the location report.
     */
    public void onLocationReportButton() {
        reportTextArea.setText(ReportManager.customersByDivision());
        report = "customer_location_report.txt";
    }

}
